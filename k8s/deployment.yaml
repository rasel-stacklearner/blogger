apiVersion: apps/v1
kind: Deployment
metadata:
  name: nextjs-app
  namespace: default
  labels:
    app: nextjs-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nextjs-app
  template:
    metadata:
      labels:
        app: nextjs-app
    spec:
      containers:
        # - name: frontend
        #   image: imranhasan871/nextjs-frontend:latest
        #   ports:
        #     - containerPort: 3000
        #   env:
        #     - name: PORT
        #       value: "3000"
        #     - name:
        #       value: http://nextjs-backend.default.svc.cluster.local:3001
        - name: backend
          image: imranhasan871/nextjs-backend:latest
          ports:
            - containerPort: 3001
          env:
            - name: PORT
              value: "3001"
            - name: DATABASE_URL
              value: postgres://postgres:postgres@postgres.default.svc.cluster.local:5432/demo_app
            - name: REDIS_HOST
              value: redis.default.svc.cluster.local
            - name: REDIS_PORT
              value: "6379"
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: frontend
#   namespace: default
# spec:
#   selector:
#     app: nextjs-app
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 3000
#   type: ClusterIP
# ---

---
# Adding Ingress resource
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nextjs-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
    - host: test.stacklearner.org # Replace with your domain
      http:
        paths:
          - path: /?(.*)
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: default
spec:
  selector:
    app: nextjs-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: default
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: demo_app
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: default
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: default
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7
          ports:
            - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: default
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
